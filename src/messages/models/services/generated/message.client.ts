/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.7.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AuthClient {
  constructor(
    private baseApiUrl: string,
    private headers: Headers,
  ) {}

  getBaseUrl(requestedUrl?: string) {
    return requestedUrl ? requestedUrl : this.baseApiUrl;
  }

  transformHttpRequestOptions(options: RequestInit): Promise<RequestInit> {
    if (!!options?.headers) {
      this.headers?.forEach((value, key) => {
        (options.headers as any)[key] = value;
      });
    }

    return Promise.resolve(options);
  }
}

export class AccessTokenAuthClient {
  constructor(private authClient: AuthClient) {}

  getBaseUrl(defaultUrl: string, baseUrl?: string) {
    return this.authClient.getBaseUrl(baseUrl);
  }

  transformOptions(options: RequestInit): Promise<RequestInit> {
    return this.authClient.transformHttpRequestOptions(options);
  }
}

export interface ChatUserResponse {
    userId: string;
    id: string;
    username: string;
    name: string;
    issued: number;
}

export interface CreateConversationRequest {
    /** Users that should be in the conversation */
    userIds: string[];
    /** Message to be created when creating the conversation */
    message?: string;
}

export interface ConversionMessageResponse {
    messageId: string;
    message: string;
    createdAt: string;
    from: string;
}

export interface UserResponse {
    userId: string;
    username: string;
    firstName: string;
    lastName: string;
    email: string;
}

export interface ConversationResponse {
    conversationId: string;
    name?: string;
    isGroup: boolean;
    createdAt: string;
    lastMessage?: ConversionMessageResponse;
    users: UserResponse[];
    admins: UserResponse[];
}

export interface ConversationsResponse {
    total: number;
    hasNextPage: boolean;
    page: number;
    take: number;
    items: ConversationResponse[];
}

export interface MessageUser {
    userId: string;
    username: string;
    firstName: string;
    lastName: string;
    email: string;
}

export interface UserReadMessageResponse {
    user: MessageUser;
    readAt: string;
}

export interface MessageReponse {
    messageId: string;
    conversationId: string;
    from: MessageUser;
    message: string;
    createdAt: string;
    readBy: UserReadMessageResponse[];
}

export interface MessagesResponse {
    items: MessageReponse[];
    page: number;
    take: number;
    total: number;
    hasNextPage: boolean;
}

export interface ConversationUserResponse {
    users: UserResponse[];
}

export interface AddConversationUsersRequest {
    userIds: string[];
}

export interface CreateMessageRequest {
    message: string;
}

export interface MessageCreatedEvent {
    message: MessageReponse;
    to: string[];
    from: string;
}

export interface MessageReadEvent {
    messages: MessageReponse[];
    to: string[];
    from: string;
}