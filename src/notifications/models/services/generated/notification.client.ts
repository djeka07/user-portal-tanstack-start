/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.7.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AuthClient {
  constructor(
    private baseApiUrl: string,
    private headers: Headers,
  ) {}

  getBaseUrl(requestedUrl?: string) {
    return requestedUrl ? requestedUrl : this.baseApiUrl;
  }

  transformHttpRequestOptions(options: RequestInit): Promise<RequestInit> {
    if (!!options?.headers) {
      this.headers?.forEach((value, key) => {
        (options.headers as any)[key] = value;
      });
    }

    return Promise.resolve(options);
  }
}

export class AccessTokenAuthClient {
  constructor(private authClient: AuthClient) {}

  getBaseUrl(defaultUrl: string, baseUrl?: string) {
    return this.authClient.getBaseUrl(baseUrl);
  }

  transformOptions(options: RequestInit): Promise<RequestInit> {
    return this.authClient.transformHttpRequestOptions(options);
  }
}

export interface SyncUsersResponse {
    added: number;
    updated: number;
    deleted: number;
}

export interface UserResponse {
    userId: string;
    username: string;
    firstName: string;
    lastName: string;
    email: string;
    online: boolean;
    lastActive: string;
}

export interface SessionResponse {
    sessionId: string;
    user: UserResponse;
    applicationId: string;
    online: boolean;
    lastActive: Date;
}

export enum NotificationEvent {
    USER_LOGGED_IN = "USER_LOGGED_IN",
    MESSAGE = "MESSAGE",
}

export interface NotificationExtraModels {
    notifcation: NotificationEvent;
}

export enum SocketEvent {
    CONNECTED = "CONNECTED",
    SESSION_CONNECTED = "SESSION_CONNECTED",
    USERS = "USERS",
    USER_DISCONNECTED = "USER_DISCONNECTED",
    MESSAGE_CREATED = "MESSAGE_CREATED",
    MESSAGE_READ = "MESSAGE_READ",
}

export interface SocketExtraModels {
    socket: SocketEvent;
}